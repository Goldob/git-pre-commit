#!/usr/bin/env node

var execSync = require('child_process').execSync;
var fs = require('fs');
var path = require('path');
var gutil = require('gulp-util');
require('shelljs/global');

function getGitRootDirectory() {
  try {
    return execSync('git rev-parse --show-toplevel').toString().trim();
  } catch(e) {
    return undefined;
  }
};

function print(message, options) {
  if (message) {
    message = JSON.stringify(message);
    var color = options && options.color || 'white';
    gutil.log(gutil.colors[color](message));
  } else {
    gutil.log(gutil.colors.red('Warning! Trying to print an undefined message'));
  }
};

var exitCode = 0;
var gitRoot = getGitRootDirectory();

function execCommand(command, root) {
  try {
    var result = exec(command, { cwd: root });
    return {
      exitCode: result.code
    }
  } catch(e) {
    print(e.stdout.toString(), {color: 'red'});
    process.exit(1);
  }
}

if (!gitRoot) {
  print("Are you sure this is a git repository..? I'll stop for now..", {color: 'red'});
  exitCode = 1;
} else {
  var packageJson = JSON.parse(fs.readFileSync(path.join(gitRoot, 'package.json')));
  var command = packageJson.precommit;

  // Checks if the command to run exists in the package.json file
  if (!command) {
    print("You did not supply any code to run in the 'precommit' field in the package.json file", {color: 'red'});
  } else {
    // Fixes the issue the causes SourceTree to not run the pre-commit hook with the error:
    // 'env: node: No such file or directory'
    command = "PATH=$PATH:/usr/local/bin:/usr/local/sbin";
    execCommand(command, gitRoot);

    // Ensure that code that isn't part of the prospective commit isn't tested within your pre-commit script
    command = "git stash --quiet --keep-index --include-untracked";
    execCommand(command, gitRoot);

    command = packageJson.precommit;
    var result = execCommand(command, gitRoot);

    if (result.exitCode !== undefined && result.exitCode !== null && result.exitCode !== 0) {
      exitCode = 1;
    }

    command = "git reset --hard";
    execCommand(command, gitRoot);

    command = "git stash pop --quiet --index";
    execCommand(command, gitRoot);
  }
}

process.exit(exitCode);
